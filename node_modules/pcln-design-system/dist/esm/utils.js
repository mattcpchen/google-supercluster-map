function _templateObject8() {
  var data = _taggedTemplateLiteral(["\n      background-color: ", ";\n    "]);

  _templateObject8 = function _templateObject8() {
    return data;
  };

  return data;
}

function _templateObject7() {
  var data = _taggedTemplateLiteral(["\n      color: ", ";\n    "]);

  _templateObject7 = function _templateObject7() {
    return data;
  };

  return data;
}

function _templateObject6() {
  var data = _taggedTemplateLiteral(["\n      background-color: ", ";\n      color: ", ";\n    "]);

  _templateObject6 = function _templateObject6() {
    return data;
  };

  return data;
}

function _templateObject5() {
  var data = _taggedTemplateLiteral(["\n          color: ", ";\n        "]);

  _templateObject5 = function _templateObject5() {
    return data;
  };

  return data;
}

function _templateObject4() {
  var data = _taggedTemplateLiteral(["\n  background-color: ", ";\n  color: ", ";\n"]);

  _templateObject4 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3() {
  var data = _taggedTemplateLiteral(["\n    ", "\n  "]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = _taggedTemplateLiteral(["\n      ", "\n      ", "\n    "]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n      ", "\n    "]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import PropTypes from 'prop-types';
import hoistStatics from 'hoist-non-react-statics';
import { themeGet } from 'styled-system';
import { css } from 'styled-components';
export { default as getSCMigrationRef } from './utils/getSCMigrationRef';
export var mapProps = function mapProps(map) {
  return function (Component) {
    return hoistStatics(function (props) {
      return React.createElement(Component, map(props));
    }, Component);
  };
}; // Use this to mark props as deprecated

export var deprecatedPropType = function deprecatedPropType(replacement) {
  return function (props, propName) {
    if (props[propName]) {
      return new Error("The `".concat(propName, "` prop is deprecated and will be removed in a future release. Please use `").concat(replacement, "` instead."));
    }
  };
};
export var deprecatedColorValue = function deprecatedColorValue() {
  return function (props, propName, componentName) {
    if (process.env.NODE_ENV !== 'production' && props.theme && props[propName] && !hasPaletteColor(_objectSpread({
      color: props[propName]
    }, props))) {
      return new Error("The color value of `".concat(props[propName], "` for `").concat(componentName, "` is deprecated and will be removed in a future release. Please use a palette color instead."));
    }
  };
};
/**
 * Converts a hex color to rgb
 *
 * @example hexToRgb('#007aff') => 'rgb(0, 122, 255)'
 *
 * @param {string} color The color to transform to rgb
 *
 * @returns {string} The color in rgb
 */

export var hexToRgb = function hexToRgb(color) {
  color = color.substring(1);
  var colors = color.match(new RegExp(".{1,".concat(color.length / 3, "}"), 'g'));

  if (colors) {
    colors = colors.map(function (val) {
      return parseInt(val.length === 1 ? val + val : val, 16);
    }).join(', ');
  }

  return colors ? "rgb(".concat(colors, ")") : '';
};
/**
 * Decomposes a color into an array of values
 *
 * @example decomposeColor('#007aff') => [0, 122, 255]
 *
 * @param {string} color The color to decompose
 *
 * @returns {Array} An array of the color values
 */

export var decomposeColor = function decomposeColor(color) {
  if (color.charAt(0) === '#') {
    return decomposeColor(hexToRgb(color));
  }

  return color.substring(color.indexOf('(') + 1, color.length - 1).split(',').map(function (value) {
    return parseFloat(value);
  });
};
/**
 * Gets the luminance of a color
 *
 * @example getLuminance('#007aff') => 0.211
 * @see https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
 *
 * @param {string} color The color to get the luminance of
 *
 * @return {Number} The luminance of the color
 */

export var getLuminance = function getLuminance(color) {
  var _decomposeColor$map = decomposeColor(color).map(function (val) {
    val = val / 255;
    return val <= 0.03928 ? val / 12.92 : Math.pow((val + 0.055) / 1.055, 2.4);
  }),
      _decomposeColor$map2 = _slicedToArray(_decomposeColor$map, 3),
      r = _decomposeColor$map2[0],
      g = _decomposeColor$map2[1],
      b = _decomposeColor$map2[2];

  return 0.2126 * r + 0.7152 * g + 0.0722 * b;
};
/**
 * Gets the contrast ratio between two colors
 *
 * @example getContrastRatio('#007aff', '#fff') => 4.016975780478911
 * @see https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
 *
 * @param {string} colorA
 * @param {string} colorB
 *
 * @return {Number} The contrast ratio
 */

export var getContrastRatio = function getContrastRatio(colorA, colorB) {
  var luminA = getLuminance(colorA);
  var luminB = getLuminance(colorB);
  return (Math.max(luminA, luminB) + 0.05) / (Math.min(luminA, luminB) + 0.05);
};
/**
 * Applies the selected size styles to a styled component.
 *
 * @param {Object} sizes An object of size styles
 *
 * @returns {array}
 */

export var applySizes = function applySizes() {
  var sizes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
  var defaultSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'medium';
  return function (_ref) {
    var size = _ref.size;
    return sizes && typeof size === 'string' && css(_templateObject(), sizes[size] || sizes[defaultSize] || '');
  };
};
/**
 * Applies the selected variation style to a styled component.
 * Combines the variation style with any custom styling from
 * theme.componentStyles[component][variation]
 *
 * Once updated to styled-components v4, componentName is no
 * longer needed as it is part of forwardedClass.displayName
 *
 * @param {string} componentName The name of the component
 * @param {Object} variations    An object of variation styles
 *
 * @returns {array}
 */

export var applyVariations = function applyVariations(componentName) {
  var variations = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  return function (props) {
    var color = props.color,
        variation = props.variation;

    if (variations && typeof variation === 'string') {
      return css(_templateObject2(), variations[variation] || '', typeof color === 'string' && themeGet("componentStyles.".concat(componentName, ".").concat(variation, ".").concat(color), ''));
    }

    return css(_templateObject3(), themeGet("componentStyles.".concat(componentName, ".").concat(color), ''));
  };
};
/**
 * Gets the color of a palette shade, using props.color as
 * the palette color. If palette shade does not exist, falls
 * back to theme.colors
 *
 * @example getPaletteColor('dark')(props) => will return the dark
 * shade of theme.palette[props.color].dark
 * @example getPaletteColor('primary.base')(props) => theme.palette.primary.base
 * @example getPaletteColor('primary', 'base')(props) => theme.palette.primary.base
 */

export var getPaletteColor = function getPaletteColor() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return function (props) {
    var color = args.length === 2 ? args[0] : props.color;
    var shade = args.length === 2 ? args[1] : args[0];
    var colorShade = shade.match(/^([a-z]+)\.([a-z]+)$/i);

    if (colorShade) {
      color = colorShade[0];
      shade = colorShade[1];
    }

    return themeGet("palette.".concat(color, ".").concat(shade))(props) || themeGet("palette.".concat(color))(props) || themeGet("colors.".concat(color))(props) || color;
  };
};
/**
 * Checks if the given color prop is a valid palette color
 *
 * @param {Object} props
 *
 * @returns {boolean}
 */

export var hasPaletteColor = function hasPaletteColor(props) {
  return props.theme && props.theme.palette && typeof props.color === 'string' && Object.keys(props.theme.palette).includes(props.color.split('.')[0]);
};
/**
 * Gets the text color that belongs on a given background color
 *
 * @param {string} name The name of the background color
 *
 * @returns {string} The text color that belongs on the background
 */

export var getTextColorOn = function getTextColorOn(name) {
  return function (props) {
    var theme = props.theme;

    if (theme.palette) {
      var _color = getPaletteColor(name)(props);

      var text = theme.palette.text;

      if (_color) {
        return getContrastRatio(text.lightest, _color) >= theme.contrastRatio ? text.lightest : text.base;
      }

      return text.base;
    }

    return '';
  };
};
export var getByPalette = function getByPalette(props) {
  return css(_templateObject4(), getPaletteColor(props.bg, 'base')(props), getPaletteColor(props.color, 'base')(props));
};
/**
 * Extended color function from styled-system. First checks
 * for a palette color before falling back to styled-system
 *
 * @param {Object} props
 *
 * @returns {string|css}
 */

export var color = function color(props) {
  if (!props.theme || !props.color && !props.bg) {
    return '';
  } else if (props.color === 'text') {
    return props.color && props.bg ? getByPalette(props) : css(_templateObject5(), getPaletteColor('base')(props));
  } else if (props.color && props.bg) {
    return getByPalette(props);
  } else if (props.color && hasPaletteColor(props)) {
    return css(_templateObject6(), getPaletteColor('base')(props), getTextColorOn('base')(props));
  } else if (props.color) {
    return css(_templateObject7(), getPaletteColor('base')(props));
  } else {
    return css(_templateObject8(), getPaletteColor(props.bg, 'base')(props));
  }
};
export var borders = function borders(props) {
  var borderColor = props.color ? getPaletteColor('base')(props) : getPaletteColor('border.base')(props);
  var focusColor = props.color ? borderColor : getPaletteColor('primary.base')(props);
  return {
    'border-color': borderColor,
    ':focus': {
      outline: 0,
      'border-color': focusColor,
      'box-shadow': "0 0 0 2px ".concat(focusColor)
    }
  };
};
/**
 * Since PropTypes doesn't ship with a type for React refs, we define one here to
 * reference throughout the project to describe custom props that expect a ref (e.g. dsRef)
 *
 * Source: https://stackoverflow.com/a/51127130
 */

export var refPropType = PropTypes.oneOfType([// Either a function
PropTypes.func, // Or the instance of any prop type on the current property
PropTypes.shape({
  current: PropTypes.any
})]);