function _templateObject() {
  var data = _taggedTemplateLiteral(["\n  color: ", ";\n  ", "\n  ", "\n  ", "\n  ", "\n  ", "\n  ", "\n  ", "\n  ", "\n  ", "\n  ", "\n  ", "\n  ", "\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import styled from 'styled-components';
import PropTypes from 'prop-types';
import { textStyle, fontSize, fontWeight, textAlign, lineHeight, space, themeGet } from 'styled-system';
import { mapProps, deprecatedPropType, deprecatedColorValue, applyVariations, getPaletteColor } from './utils';
export var caps = function caps(props) {
  return props.caps ? {
    textTransform: 'uppercase',
    letterSpacing: themeGet('letterSpacings.caps')(props)
  } : null;
};
export var regular = function regular(props) {
  return props.regular ? {
    fontWeight: props.theme.regular
  } : null;
};
export var bold = function bold(props) {
  return props.bold ? {
    fontWeight: props.theme.bold
  } : null;
};
export var textShadow = function textShadow(props) {
  var textShadowSize = props.textShadowSize || 'md';
  return props.enableTextShadow ? {
    textShadow: props.theme.textShadows[textShadowSize]
  } : null;
};
var Text = mapProps(function (_ref) {
  var align = _ref.align,
      props = _objectWithoutProperties(_ref, ["align"]);

  return _objectSpread({
    textAlign: align
  }, props);
})(styled.div(_templateObject(), getPaletteColor('base'), function (props) {
  return props.bg ? "background-color: ".concat(getPaletteColor(props.bg, 'base')(props), ";") : '';
}, applyVariations('Text'), textStyle, fontSize, fontWeight, textAlign, lineHeight, space, caps, regular, bold, textShadow));
Text.displayName = 'Text';
Text.propTypes = _objectSpread({}, textStyle.propTypes, {}, fontSize.propTypes, {}, fontWeight.propTypes, {}, textAlign.propTypes, {}, lineHeight.propTypes, {}, space.propTypes, {
  color: deprecatedColorValue(),
  caps: PropTypes.bool,
  regular: PropTypes.bool,
  bold: PropTypes.bool,
  enableTextShadow: PropTypes.bool,
  textShadowSize: PropTypes.oneOf(['sm', 'md']),
  align: deprecatedPropType('textAlign')
});
Text.span = Text.withComponent('span');
Text.p = Text.withComponent('p');
Text.s = Text.withComponent('s');
export default Text;