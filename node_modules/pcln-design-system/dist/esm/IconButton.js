function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n  padding: 0;\n  background-color: transparent;\n  color: inherit;\n\n  &:hover {\n    background-color: transparent;\n    color: inherit;\n  }\n  & > div {\n    display: flex;\n  }\n\n  ", "\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import React from 'react';
import styled from 'styled-components';
import PropTypes from 'prop-types';
import Button from './Button';
import { applyVariations, refPropType, getSCMigrationRef } from './utils';
var TransparentButton = styled(Button)(_templateObject(), applyVariations('IconButton'));

var IconButton = function IconButton(_ref) {
  var icon = _ref.icon,
      props = _objectWithoutProperties(_ref, ["icon"]);

  // TODO remove once migrated to SC4
  var spreadProps = props;
  spreadProps[getSCMigrationRef()] = props.dsRef;
  delete spreadProps.dsRef;
  return React.createElement(TransparentButton, spreadProps, React.createElement("div", null, icon));
};

IconButton.displayName = 'IconButton';
IconButton.isIconButton = true;
IconButton.propTypes = {
  dsRef: refPropType,
  icon: PropTypes.node
};
export default IconButton;