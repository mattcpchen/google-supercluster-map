function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n  display: inline;\n  box-shadow: ", ";\n  font-size: ", "px;\n  position: absolute;\n  border-radius: ", "px;\n  box-sizing: border-box;\n  background: ", ";\n  text-align: center;\n\n  ", " ", " &::after {\n    content: '';\n    position: absolute;\n    width: 0;\n    height: 0;\n    border-width: 5px;\n    border-style: solid;\n    border-color: transparent transparent ", " ", ";\n\n    ", " ", " ", " ", ";\n  }\n  \n  ", "\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import React from 'react';
import PropTypes from 'prop-types';
import Box from './Box';
import styled, { withTheme } from 'styled-components';
import { applyVariations, getPaletteColor, deprecatedColorValue, deprecatedPropType } from './utils';

var arrowShadow = function arrowShadow(props) {
  return props.top ? {
    'box-shadow': '-9.66px 9.66px 8px 0 rgba(0,0,0,0.04), -4px 4px 4px 0 rgba(0,0,0,0.08)'
  } : {
    'box-shadow': '-1.41px 1.41px 1px 0 rgba(0,0,0,0.01), -3.66px 3.66px 8px 0 rgba(0,0,0,0.04)'
  };
};

var arrowAlign = function arrowAlign(props) {
  return props.left ? {
    left: '16px',
    'margin-left': props.top ? 0 : '15px'
  } : props.center ? {
    left: '50%',
    'margin-left': props.top ? '-7px' : '7px'
  } : {
    right: '16px',
    'margin-right': props.top ? '5px' : '-10px'
  };
};

var arrowPosition = function arrowPosition(props) {
  return props.top ? {
    'transform-origin': '0 0',
    transform: 'rotate(-45deg)',
    bottom: '-10px'
  } : {
    'transform-origin': '0 0',
    transform: 'rotate(-225deg)',
    top: '0'
  };
};

var arrow = function arrow(props) {
  return props.top ? {
    'transform-origin': '0 0',
    transform: 'rotate(-45deg)'
  } : {
    'transform-origin': '0 0',
    transform: 'rotate(-225deg)'
  };
};

var tooltipPosition = function tooltipPosition(props) {
  return props.top ? {
    bottom: '-8px'
  } : {
    top: 0
  };
};

var tooltipAlign = function tooltipAlign(props) {
  return props.right ? {
    right: 0
  } : props.center ? {
    left: '50%',
    width: 'auto',
    transform: 'translateX(-50%)'
  } : null;
};

var TooltipContent = styled(Box)(_templateObject(), function (_ref) {
  var theme = _ref.theme;
  return theme.boxShadows[1];
}, function (_ref2) {
  var theme = _ref2.theme;
  return theme.fontSizes[0];
}, function (_ref3) {
  var theme = _ref3.theme;
  return theme.radii[1];
}, function (props) {
  return getPaletteColor(props.bg || props.color, 'base')(props);
}, tooltipPosition, tooltipAlign, function (props) {
  return getPaletteColor(props.bg || props.color, 'base')(props);
}, function (props) {
  return getPaletteColor(props.bg || props.color, 'base')(props);
}, arrow, arrowPosition, arrowAlign, arrowShadow, applyVariations('Tooltip'));
var propTypes = {
  children: PropTypes.any.isRequired,
  bg: deprecatedPropType('color'),
  color: deprecatedColorValue(),
  bottom: PropTypes.bool,
  top: PropTypes.bool,
  center: PropTypes.bool,
  left: PropTypes.bool,
  right: PropTypes.bool,
  zIndex: PropTypes.oneOfType([PropTypes.number, PropTypes.string])
};
var defaultProps = {
  position: 'bottom',
  color: 'background.lightest',
  zIndex: 'auto'
};

var Tooltip = function Tooltip(_ref4) {
  var children = _ref4.children,
      props = _objectWithoutProperties(_ref4, ["children"]);

  return React.createElement("div", {
    style: {
      position: 'relative',
      zIndex: props.zIndex
    }
  }, React.createElement(TooltipContent, _extends({
    p: 2,
    mb: 3,
    mt: 2
  }, props), children));
};

Tooltip.propTypes = propTypes;
Tooltip.defaultProps = defaultProps;
export default withTheme(Tooltip);