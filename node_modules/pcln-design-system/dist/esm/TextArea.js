function _templateObject() {
  var data = _taggedTemplateLiteral(["\n  appearance: none;\n  display: block;\n  width: 100%;\n  font-family: inherit;\n  font-size: ", "px;\n  color: inherit;\n  background-color: transparent;\n  border-radius: ", ";\n  border-width: 1px;\n  border-style: solid;\n\n  padding-top: 14px;\n  padding-bottom: 14px;\n  padding-left: 12px;\n  padding-right: 12px;\n\n  margin: 0;\n\n  ::placeholder {\n    color: ", ";\n  }\n\n  ::-ms-clear {\n    display: none;\n  }\n\n  ", " ", ";\n  ", "\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import styled from 'styled-components';
import { space, themeGet } from 'styled-system';
import PropTypes from 'prop-types';
import { applyVariations, getPaletteColor, borders, deprecatedColorValue, mapProps, getSCMigrationRef, refPropType } from './utils';
var TextArea = mapProps(function (_ref) {
  var dsRef = _ref.dsRef,
      props = _objectWithoutProperties(_ref, ["dsRef"]);

  return _objectSpread(_defineProperty({}, getSCMigrationRef(), dsRef), props);
})(styled.textarea(_templateObject(), themeGet('fontSizes.1'), themeGet('radius'), getPaletteColor('text.light'), borders, space, applyVariations('TextArea')));
TextArea.displayName = 'TextArea';
TextArea.isField = true;
TextArea.propTypes = _objectSpread({
  id: PropTypes.string.isRequired,
  color: deprecatedColorValue(),
  dsRef: refPropType
}, borders.propTypes, {}, space.propTypes);
export default TextArea;