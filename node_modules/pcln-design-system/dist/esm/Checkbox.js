function _templateObject2() {
  var data = _taggedTemplateLiteral(["\n  appearance: none;\n  opacity: 0;\n  position: absolute;\n  z-index: 0;\n"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n  display: inline-flex;\n  align-items: center;\n  position: relative;\n  vertical-align: middle;\n  padding: 2px;\n  cursor: pointer;\n  background-color: inherit;\n  color: ", ";\n\n  svg {\n    border: 1px solid transparent;\n    border-radius: 4px;\n    padding: 2px;\n  }\n\n  svg[data-name='checked'] {\n    display: none;\n  }\n  \n  > input:hover ~ svg[data-name='empty'] {\n    color: ", ";\n      }\n  }\n  \n  > input {\n    &:focus ~ svg {\n      border: 1px solid ", ";\n      background-color: ", ";\n    }\n  }\n\n  > input:checked {\n    & ~ svg[data-name='checked'] {\n      display: inline-block;\n      color: ", ";\n    }\n\n    & ~ svg[data-name='empty'] {\n      display: none;\n    }\n    \n    &:focus ~ svg {\n      border: 1px solid ", ";\n      background-color: ", ";\n    }\n\n    &:hover ~ svg[data-name='checked'] {\n      color: ", "\n  }\n\n  ", "\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from 'react';
import styled, { withTheme } from 'styled-components';
import { BoxChecked, BoxEmpty } from 'pcln-icons';
import PropTypes from 'prop-types';
import Box from './Box';
import { applyVariations, getPaletteColor, deprecatedColorValue, mapProps, getSCMigrationRef, refPropType } from './utils';

var Checkbox = function Checkbox(props) {
  var disabled = props.disabled,
      size = props.size; // Add 4px to Icon's height and width to account for size reduction caused by adding padding to SVG element

  var borderAdjustedSize = size + 4;
  return React.createElement(CheckBoxWrapper, {
    theme: props.theme,
    color: props.color,
    disabled: disabled
  }, React.createElement(StyledInput, _extends({
    type: "checkbox"
  }, props, {
    role: "checkbox"
  })), React.createElement(BoxChecked, {
    size: borderAdjustedSize,
    "data-name": "checked"
  }), React.createElement(BoxEmpty, {
    size: borderAdjustedSize,
    "data-name": "empty"
  }));
};

var CheckBoxWrapper = styled(Box)(_templateObject(), function (props) {
  return props.disabled ? getPaletteColor('border.base')(props) : getPaletteColor('border.light')(props);
}, function (props) {
  return props.disabled ? getPaletteColor('border.base')(props) : getPaletteColor('base')(props);
}, getPaletteColor('border.base'), getPaletteColor('background.light'), function (props) {
  return props.disabled ? getPaletteColor('border.base')(props) : getPaletteColor('base')(props);
}, getPaletteColor('base'), getPaletteColor('light'), function (props) {
  return props.disabled ? getPaletteColor('border.base')(props) : getPaletteColor('dark')(props);
}, applyVariations('Checkbox'));
var StyledInput = mapProps(function (_ref) {
  var dsRef = _ref.dsRef,
      props = _objectWithoutProperties(_ref, ["dsRef"]);

  return _objectSpread(_defineProperty({}, getSCMigrationRef(), dsRef), props);
})(styled.input(_templateObject2()));
Checkbox.displayName = 'Checkbox';
Checkbox.propTypes = {
  id: PropTypes.string.isRequired,
  size: PropTypes.number,
  onChange: PropTypes.func.isRequired,
  dsRef: refPropType,
  color: deprecatedColorValue()
};
Checkbox.defaultProps = {
  size: 20,
  color: 'primary'
};
export default withTheme(Checkbox);