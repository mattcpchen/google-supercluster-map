function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n  border: 0;\n  border-bottom-style: solid;\n  border-bottom-width: 1px;\n  border-color: ", ";\n  ", " ", ";\n  ", "\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import styled from 'styled-components';
import { applyVariations, getPaletteColor, deprecatedColorValue } from './utils';
import { space, width, borderColor } from 'styled-system';
var Divider = styled.hr(_templateObject(), function (props) {
  return getPaletteColor(props.borderColor || props.color, 'base')(props);
}, space, width, applyVariations('Divider'));
Divider.displayName = 'Divider';
Divider.defaultProps = {
  color: 'border',
  ml: 0,
  mr: 0
};
Divider.propTypes = _objectSpread({}, space.propTypes, {}, width.propTypes, {}, borderColor.propTypes, {
  color: deprecatedColorValue()
});
export default Divider;