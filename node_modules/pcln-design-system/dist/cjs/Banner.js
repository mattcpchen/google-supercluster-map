"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireDefault(require("react"));

var _Box = _interopRequireDefault(require("./Box"));

var _Flex = _interopRequireDefault(require("./Flex"));

var _Text = _interopRequireDefault(require("./Text"));

var _CloseButton = _interopRequireDefault(require("./CloseButton"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _pclnIcons = require("pcln-icons");

var _utils = require("./utils");

function _templateObject() {
  var data = (0, _taggedTemplateLiteral2["default"])(["\n  ", "\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

var bannerColors = {
  green: {
    backgroundColor: 'secondary.base',
    color: 'text.lightest',
    icon: _react["default"].createElement(_pclnIcons.Success, null)
  },
  lightGreen: {
    backgroundColor: 'secondary.light',
    color: 'secondary.dark',
    icon: _react["default"].createElement(_pclnIcons.Success, null)
  },
  red: {
    backgroundColor: 'error.base',
    color: 'text.lightest',
    icon: _react["default"].createElement(_pclnIcons.Warning, null)
  },
  lightRed: {
    backgroundColor: 'error.light',
    color: 'error.dark',
    icon: _react["default"].createElement(_pclnIcons.Warning, null)
  },
  orange: {
    backgroundColor: 'alert.base',
    color: 'text.lightest',
    icon: _react["default"].createElement(_pclnIcons.Attention, null)
  },
  blue: {
    backgroundColor: 'primary.base',
    color: 'text.lightest',
    icon: _react["default"].createElement(_pclnIcons.Information, null)
  },
  lightBlue: {
    backgroundColor: 'primary.light',
    color: 'primary.dark',
    icon: _react["default"].createElement(_pclnIcons.Information, null)
  }
};
var StyledBox = (0, _styledComponents["default"])(_Box["default"])(_templateObject(), (0, _utils.applyVariations)('Banner'));

var Banner = function Banner(props) {
  var bannerColor = bannerColors[!props.bg && props.color === 'green' ? props.color : props.bg] || {};
  var Icon = props.icon || bannerColor.icon;
  var color = !bannerColor.color ? props.color : bannerColor.color;
  var header = null;

  if (props.header) {
    header = _react["default"].isValidElement(props.header) ? props.header : _react["default"].createElement(_Text["default"], {
      textStyle: "display2"
    }, props.header);
  }

  return _react["default"].createElement(StyledBox, (0, _extends2["default"])({}, props, {
    bg: bannerColor.backgroundColor || props.bg,
    color: color
  }), _react["default"].createElement(_Flex["default"], {
    justifyContent: "space-between",
    alignItems: "flex-start"
  }, !!Icon && !!props.showIcon && _react["default"].cloneElement(Icon, {
    mr: 2,
    size: 24,
    mt: '-2px'
  }), _react["default"].createElement(_Box["default"], {
    textAlign: props.textAlign,
    width: 1
  }, header, _react["default"].createElement(_Text["default"].span, {
    fontSize: 1
  }, props.text), props.children), !!props.onClose && _react["default"].createElement(_CloseButton["default"], {
    onClick: props.onClose,
    ml: 2,
    size: 24,
    title: "close",
    mt: "-2px"
  })));
};

Banner.displayName = 'Banner';
Banner.propTypes = {
  header: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].node]),
  icon: _propTypes["default"].node,
  onClose: _propTypes["default"].func,
  showIcon: _propTypes["default"].bool,
  text: _propTypes["default"].node,
  textAlign: _propTypes["default"].string,
  color: (0, _utils.deprecatedColorValue)(),
  bg: (0, _utils.deprecatedPropType)('color')
};
Banner.defaultProps = {
  textAlign: 'left',
  showIcon: true,
  color: 'green'
};

var _default = (0, _styledComponents.withTheme)(Banner);

exports["default"] = _default;