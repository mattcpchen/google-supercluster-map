function _templateObject4() {
  var data = _taggedTemplateLiteral(["\n  ", " ", ";\n  ", "\n"]);

  _templateObject4 = function _templateObject4() {
    return data;
  };

  return data;
}

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _templateObject3() {
  var data = _taggedTemplateLiteral(["\n    &:hover {\n      text-decoration: none;\n    }\n\n    ", "\n  "]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = _taggedTemplateLiteral(["\n    cursor: pointer;\n    text-decoration: none;\n    color: ", ";\n\n    &:hover {\n      color: ", ";\n      text-decoration: underline;\n    }\n  "]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n    &:hover {\n      text-decoration: none;\n    }\n\n    ", "\n  "]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import PropTypes from 'prop-types';
import styled, { css } from 'styled-components';
import { width, space } from 'styled-system';
import { applyVariations, getPaletteColor, deprecatedColorValue, getSCMigrationRef, refPropType, mapProps } from './utils';
import { buttonStyles } from './Button';
var variations = {
  fill: css(_templateObject(), buttonStyles),
  link: css(_templateObject2(), getPaletteColor('base'), getPaletteColor('dark')),
  outline: css(_templateObject3(), buttonStyles)
};
var Link = mapProps(function (_ref) {
  var _objectSpread2;

  var target = _ref.target,
      dsRef = _ref.dsRef,
      props = _objectWithoutProperties(_ref, ["target", "dsRef"]);

  return _objectSpread((_objectSpread2 = {}, _defineProperty(_objectSpread2, getSCMigrationRef(), dsRef), _defineProperty(_objectSpread2, "rel", target === '_blank' ? 'noopener' : null), _defineProperty(_objectSpread2, "target", target), _objectSpread2), props);
})(styled.a(_templateObject4(), width, space, applyVariations('Link', variations)));
Link.displayName = 'Link';
Link.defaultProps = {
  color: 'primary',
  variation: 'link'
};
Link.propTypes = {
  color: deprecatedColorValue(),
  dsRef: refPropType,
  variation: PropTypes.oneOf(Object.keys(variations))
};
export default Link;