function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import React from 'react';
import IconField from './IconField';

var FormField = function FormField(props) {
  var iconBefore = false;
  var children = React.Children.toArray(props.children);

  var _children$filter = children.filter(function (child) {
    return child.type.isField;
  }),
      _children$filter2 = _slicedToArray(_children$filter, 1),
      field = _children$filter2[0];

  var _children$filter3 = children.filter(function (child) {
    return child.type.isLabel;
  }),
      _children$filter4 = _slicedToArray(_children$filter3, 1),
      label = _children$filter4[0];

  var valueNoLabel = !label && field && !!field.props.value;
  var showLabel = (label && !label.props.autoHide || field && !!field.props.value) && !valueNoLabel;
  var id = field && (field.props.id || field.props.name);
  var styled = children.map(function (child, i, arr) {
    if (child.type.isField && arr[i - 1] && arr[i - 1].type.isIcon) {
      iconBefore = true;
    }

    if (child === field) {
      return React.cloneElement(child, {
        id: id,
        style: _objectSpread({}, child.props.style, {
          transitionProperty: 'padding-top, padding-bottom',
          transitionDuration: '.1s',
          paddingTop: showLabel ? 20 : 14,
          paddingBottom: showLabel ? 8 : 14
        })
      });
    }

    return child;
  });
  var ml = iconBefore ? '40px' : '12px';
  var styledLabel = label && React.cloneElement(label, {
    htmlFor: label.props.htmlFor || id,
    fontSize: 10,
    ml: ml,
    pt: '6px',
    mb: '-20px',
    style: _objectSpread({}, label.props.style, {
      height: 20,
      transitionProperty: 'opacity',
      transitionDuration: '.1s',
      opacity: showLabel ? 1 : 0,
      pointerEvents: 'none',
      position: 'relative',
      width: "calc(100% - ".concat(ml, ")")
    })
  });
  return React.createElement("div", null, styledLabel, React.createElement(IconField, null, styled));
};

var childrenPropType = function childrenPropType(props, propName, componentName) {
  var children = React.Children.toArray(props.children);

  var _children$filter5 = children.filter(function (child) {
    return child.type.isLabel;
  }),
      _children$filter6 = _slicedToArray(_children$filter5, 1),
      label = _children$filter6[0];

  var _children$filter7 = children.filter(function (child) {
    return child.type.isField;
  }),
      _children$filter8 = _slicedToArray(_children$filter7, 1),
      field = _children$filter8[0];

  if (!field) {
    return new Error("No form field found for ".concat(componentName, ". Please include an Input, Select, or other form field as a child."));
  }

  if (!label) {
    return new Error("No label found for ".concat(componentName, ". Please include a Label as a child."));
  }
};

FormField.propTypes = {
  children: childrenPropType
};
FormField.displayName = 'FormField';
export default FormField;