function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _templateObject4() {
  var data = _taggedTemplateLiteral(["\n  vertical-align: middle;\n"]);

  _templateObject4 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3() {
  var data = _taggedTemplateLiteral(["\n  vertical-align: middle;\n"]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = _taggedTemplateLiteral(["\n  appearance: none;\n  opacity: 0;\n  position: absolute;\n  z-index: 0;\n\n  & ~ svg {\n    border: 1px solid transparent;\n    border-radius: 50%;\n    padding: 2px;\n  }\n\n  &:focus {\n    box-shadow: none;\n    & ~ svg {\n      border: 1px solid ", ";\n      background-color: ", ";\n    }\n  }\n  &:checked ~ svg {\n    color: ", ";\n  }\n  &:disabled ~ svg {\n    color: ", ";\n  }\n"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n  display: inline-block;\n  color: ", ";\n  &:hover > svg {\n    ", ";\n  }\n  ", "\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import React from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import { RadioChecked, RadioEmpty } from 'pcln-icons';
import { applyVariations, deprecatedColorValue, getPaletteColor, refPropType, getSCMigrationRef } from './utils';
var RadioWrap = styled.div(_templateObject(), getPaletteColor('border.base'), function (props) {
  if (props.checked && !props.disabled) {
    return "color: ".concat(getPaletteColor('dark')(props), " !important;");
  }

  return props.disabled ? null : "color: ".concat(getPaletteColor('base')(props), ";");
}, applyVariations('Radio'));
var RadioInput = styled.input(_templateObject2(), getPaletteColor('border.base'), getPaletteColor('background.light'), getPaletteColor('base'), getPaletteColor('border.base'));
var RadioCheckedIcon = styled(RadioChecked)(_templateObject3());
var RadioEmptyIcon = styled(RadioEmpty)(_templateObject4());

var RadioIcon = function RadioIcon(_ref) {
  var checked = _ref.checked,
      props = _objectWithoutProperties(_ref, ["checked"]);

  return checked ? React.createElement(RadioCheckedIcon, props) : React.createElement(RadioEmptyIcon, props);
};

var Radio = function Radio(props) {
  var checked = props.checked,
      disabled = props.disabled,
      size = props.size;
  var borderAdjustedSize = size + 4; // TODO remove once migrated to SC4

  var spreadProps = _objectSpread({}, props);

  spreadProps[getSCMigrationRef()] = props.dsRef;
  delete spreadProps.dsRef;
  return React.createElement(RadioWrap, {
    color: props.color,
    checked: checked,
    disabled: disabled
  }, React.createElement(RadioInput, _extends({
    type: "radio"
  }, spreadProps)), React.createElement(RadioIcon, {
    checked: checked,
    size: borderAdjustedSize
  }));
};

Radio.defaultProps = {
  color: 'primary',
  size: 24
};
Radio.propTypes = {
  color: deprecatedColorValue(),
  dsRef: refPropType,
  size: PropTypes.number
};
export default Radio;