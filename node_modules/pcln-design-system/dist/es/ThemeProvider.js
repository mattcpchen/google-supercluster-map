function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n  font-family: ", ";\n  line-height: ", ";\n  font-weight: ", ";\n\n  * {\n    box-sizing: border-box;\n  }\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import React from 'react';
import PropTypes from 'prop-types';
import styled, { ThemeProvider as StyledThemeProvider } from 'styled-components';
import createTheme from './createTheme';
export var Base = styled.div(_templateObject(), function (props) {
  return props.theme.font;
}, function (props) {
  return props.theme.lineHeights.standard;
}, function (props) {
  return props.theme.fontWeights.medium;
});

var ThemeProvider = function ThemeProvider(_ref) {
  var theme = _ref.theme,
      customBreakpoints = _ref.customBreakpoints,
      props = _objectWithoutProperties(_ref, ["theme", "customBreakpoints"]);

  // Once updated to React 16.8 this should be wrapped in React.useMemo()
  var mergedTheme = createTheme(theme, customBreakpoints);
  return React.createElement(StyledThemeProvider, {
    theme: mergedTheme
  }, React.createElement(Base, props));
};

ThemeProvider.propTypes = {
  /** The theme to drive the look and feel */
  theme: PropTypes.shape({
    breakpoints: PropTypes.arrayOf(PropTypes.string),
    mediaQueries: PropTypes.arrayOf(PropTypes.string),
    space: PropTypes.arrayOf(PropTypes.number),
    font: PropTypes.string,
    fontSizes: PropTypes.arrayOf(PropTypes.number),
    fontWeights: PropTypes.shape({
      medium: PropTypes.number,
      bold: PropTypes.number,
      regular: PropTypes.number
    }),
    lineHeights: PropTypes.shape({
      standard: PropTypes.number,
      display: PropTypes.number
    }),
    letterSpacings: PropTypes.shape({
      normal: PropTypes.string,
      caps: PropTypes.string
    }),
    regular: PropTypes.number,
    bold: PropTypes.number,
    colors: PropTypes.object,
    palette: PropTypes.object,
    radii: PropTypes.arrayOf(PropTypes.number),
    radius: PropTypes.string,
    boxShadows: PropTypes.arrayOf(PropTypes.string),
    maxContainerWidth: PropTypes.string,
    duration: PropTypes.object,
    timingFunctions: PropTypes.object,
    transitionDelays: PropTypes.object
  }),

  /** Array of pixel values for custom breakpoint overrides */
  customBreakpoints: PropTypes.arrayOf(PropTypes.string)
};
export default ThemeProvider;