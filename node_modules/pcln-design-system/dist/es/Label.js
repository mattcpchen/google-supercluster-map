function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n  font-size: 10px;\n  letter-spacing: 0.2px;\n  display: block;\n  width: 100%;\n  margin: 0;\n  color: ", ";\n  ", "\n\n  ", " ", " ", " ", ";\n  ", "\n  ", "\n  ", "\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import styled from 'styled-components';
import { space, fontSize, fontWeight, width } from 'styled-system';
import { applyVariations, getPaletteColor, deprecatedColorValue } from './utils';

var nowrap = function nowrap(props) {
  return props.nowrap ? {
    whiteSpace: 'nowrap'
  } : null;
};

var accessiblyHide = function accessiblyHide(props) {
  return props.hidden ? {
    position: 'absolute',
    width: '1px',
    height: '1px',
    clip: 'rect(1px, 1px, 1px, 1px)'
  } : null;
};

var Label = styled.label(_templateObject(), getPaletteColor('base'), function (props) {
  return props.bg ? "background-color: ".concat(getPaletteColor(props.bg, 'base')(props), ";") : '';
}, space, fontSize, fontWeight, width, nowrap, accessiblyHide, applyVariations('Label'));
Label.propTypes = _objectSpread({}, space.propTypes, {}, fontSize.propTypes, {
  color: deprecatedColorValue()
}, fontWeight.propTypes, {}, width.propTypes);
Label.defaultProps = {
  fontSize: '10px',
  fontWeight: 'bold',
  color: 'border.light'
};
Label.displayName = 'Label';
Label.isLabel = true;
export default Label;