function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _templateObject5() {
  var data = _taggedTemplateLiteral(["\n  ", "\n"]);

  _templateObject5 = function _templateObject5() {
    return data;
  };

  return data;
}

function _templateObject4() {
  var data = _taggedTemplateLiteral(["\n  position: relative;\n"]);

  _templateObject4 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3() {
  var data = _taggedTemplateLiteral(["\n  font-size: ", "px;\n  border-radius: 0 0 ", " 0;\n  ", " ", ";\n  z-index: 2;\n"]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = _taggedTemplateLiteral(["\n  flex: none;\n  background-color: ", ";\n  border-radius: 0 ", " ", " 0;\n  /* for 32 x 8 triangle */\n  transform: skew(-14deg);\n  position: relative;\n  z-index: 1;\n"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n  width: 8px;\n  height: 8px;\n  align-self: flex-end;\n  background-color: inherit;\n  ", ";\n  position: absolute;\n  bottom: 0;\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import React from 'react';
import styled, { withTheme } from 'styled-components';
import { themeGet } from 'styled-system';
import Flex from './Flex';
import Hide from './Hide';
import Box from './Box';
import { applyVariations, getPaletteColor, hasPaletteColor, color, deprecatedColorValue, deprecatedPropType } from './utils';

var capitalize = function capitalize(str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
};

var shadowColor = function shadowColor(props) {
  var darkColor = hasPaletteColor(props) ? getPaletteColor('dark')(props) : themeGet("colors.dark".concat(capitalize(props.color)))(props);
  return {
    backgroundImage: !darkColor ? "\n        linear-gradient(45deg, transparent 50%, rgba(0, 0, 0, 0.5) 50%),\n        linear-gradient(45deg, transparent 50%, ".concat(props.color, " 50%)\n      ") : "linear-gradient(45deg, transparent 50%, ".concat(darkColor, " 50%)")
  };
};

var FlagShadow = styled(Box)(_templateObject(), shadowColor);
var FlagRight = styled(Box)(_templateObject2(), function (props) {
  return getPaletteColor('base')(props) || props.color;
}, themeGet('radius'), themeGet('radius'));

var flexAuto = function flexAuto(props) {
  return props.flexAuto ? {
    flex: '1 1 auto'
  } : null;
};

var FlagBody = styled(Box)(_templateObject3(), themeGet('fontSizes.0'), themeGet('radius'), flexAuto, color);
var RelativeHide = styled(Hide)(_templateObject4());
var StyledFlex = styled(Flex)(_templateObject5(), applyVariations('Flag'));

var Flag = function Flag(_ref) {
  var color = _ref.color,
      bg = _ref.bg,
      children = _ref.children,
      width = _ref.width,
      props = _objectWithoutProperties(_ref, ["color", "bg", "children", "width"]);

  return React.createElement(StyledFlex, _extends({
    width: width
  }, props, {
    ml: [0, -2]
  }), React.createElement(RelativeHide, {
    xs: true
  }, React.createElement(FlagShadow, {
    width: "4px",
    mr: -2,
    mb: -2,
    color: hasPaletteColor(_objectSpread({
      color: color
    }, props)) ? color : bg
  })), React.createElement(FlagBody, {
    flexAuto: !!width,
    color: color,
    bg: hasPaletteColor(_objectSpread({
      color: color
    }, props)) ? false : bg,
    py: [1, 2],
    pl: [1, 3]
  }, children), React.createElement(FlagRight, {
    width: "18px",
    color: hasPaletteColor(_objectSpread({
      color: color
    }, props)) ? color : bg,
    ml: -2
  }));
};

Flag.propTypes = {
  color: deprecatedColorValue(),
  bg: deprecatedPropType('color')
};
Flag.defaultProps = {
  color: 'white',
  bg: 'green'
};
Flag.displayName = 'Flag';
export default withTheme(Flag);