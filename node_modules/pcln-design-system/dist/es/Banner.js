function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n  ", "\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import React from 'react';
import Box from './Box';
import Flex from './Flex';
import Text from './Text';
import CloseButton from './CloseButton';
import PropTypes from 'prop-types';
import styled, { withTheme } from 'styled-components';
import { Attention as AttentionIcon, Information as InformationIcon, Success as SuccessIcon, Warning as WarningIcon } from 'pcln-icons';
import { applyVariations, deprecatedColorValue, deprecatedPropType } from './utils';
var bannerColors = {
  green: {
    backgroundColor: 'secondary.base',
    color: 'text.lightest',
    icon: React.createElement(SuccessIcon, null)
  },
  lightGreen: {
    backgroundColor: 'secondary.light',
    color: 'secondary.dark',
    icon: React.createElement(SuccessIcon, null)
  },
  red: {
    backgroundColor: 'error.base',
    color: 'text.lightest',
    icon: React.createElement(WarningIcon, null)
  },
  lightRed: {
    backgroundColor: 'error.light',
    color: 'error.dark',
    icon: React.createElement(WarningIcon, null)
  },
  orange: {
    backgroundColor: 'alert.base',
    color: 'text.lightest',
    icon: React.createElement(AttentionIcon, null)
  },
  blue: {
    backgroundColor: 'primary.base',
    color: 'text.lightest',
    icon: React.createElement(InformationIcon, null)
  },
  lightBlue: {
    backgroundColor: 'primary.light',
    color: 'primary.dark',
    icon: React.createElement(InformationIcon, null)
  }
};
var StyledBox = styled(Box)(_templateObject(), applyVariations('Banner'));

var Banner = function Banner(props) {
  var bannerColor = bannerColors[!props.bg && props.color === 'green' ? props.color : props.bg] || {};
  var Icon = props.icon || bannerColor.icon;
  var color = !bannerColor.color ? props.color : bannerColor.color;
  var header = null;

  if (props.header) {
    header = React.isValidElement(props.header) ? props.header : React.createElement(Text, {
      textStyle: "display2"
    }, props.header);
  }

  return React.createElement(StyledBox, _extends({}, props, {
    bg: bannerColor.backgroundColor || props.bg,
    color: color
  }), React.createElement(Flex, {
    justifyContent: "space-between",
    alignItems: "flex-start"
  }, !!Icon && !!props.showIcon && React.cloneElement(Icon, {
    mr: 2,
    size: 24,
    mt: '-2px'
  }), React.createElement(Box, {
    textAlign: props.textAlign,
    width: 1
  }, header, React.createElement(Text.span, {
    fontSize: 1
  }, props.text), props.children), !!props.onClose && React.createElement(CloseButton, {
    onClick: props.onClose,
    ml: 2,
    size: 24,
    title: "close",
    mt: "-2px"
  })));
};

Banner.displayName = 'Banner';
Banner.propTypes = {
  header: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),
  icon: PropTypes.node,
  onClose: PropTypes.func,
  showIcon: PropTypes.bool,
  text: PropTypes.node,
  textAlign: PropTypes.string,
  color: deprecatedColorValue(),
  bg: deprecatedPropType('color')
};
Banner.defaultProps = {
  textAlign: 'left',
  showIcon: true,
  color: 'green'
};
export default withTheme(Banner);