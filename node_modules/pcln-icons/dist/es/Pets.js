function _templateObject() {
  var data = _taggedTemplateLiteral(["\n  outline: none;\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import Svg from './Svg';
import styled from 'styled-components';

var BaseComponent = function BaseComponent(_ref) {
  var size = _ref.size,
      title = _ref.title,
      desc = _ref.desc,
      titleId = _ref.titleId,
      descId = _ref.descId,
      props = _objectWithoutProperties(_ref, ["size", "title", "desc", "titleId", "descId"]);

  var ariaLabelledBy = titleId ? titleId : '';
  ariaLabelledBy += desc && descId ? " ".concat(descId) : '';
  ariaLabelledBy = ariaLabelledBy ? ariaLabelledBy : undefined;
  props['aria-labelledby'] = ariaLabelledBy;
  return React.createElement(Svg, _extends({
    viewBox: "0 0 24 24",
    height: size,
    width: size,
    title: title,
    titleId: titleId,
    desc: desc,
    descId: descId,
    "aria-labelledby": ariaLabelledBy,
    "aria-hidden": !ariaLabelledBy,
    fill: "currentcolor"
  }, props), !!title && React.createElement("title", {
    id: titleId
  }, title), !!desc && React.createElement("desc", {
    id: descId
  }, desc), React.createElement("path", {
    d: "M4.5 11.5C3.1 11.5 2 10.4 2 9s1.1-2.5 2.5-2.5S7 7.6 7 9s-1.1 2.5-2.5 2.5zm4.5-4C7.6 7.5 6.5 6.4 6.5 5S7.6 2.5 9 2.5s2.5 1.1 2.5 2.5S10.4 7.5 9 7.5zm6 0c-1.4 0-2.5-1.1-2.5-2.5s1.1-2.5 2.5-2.5 2.5 1.1 2.5 2.5-1.1 2.5-2.5 2.5zm4.5 4c-1.4 0-2.5-1.1-2.5-2.5s1.1-2.5 2.5-2.5S22 7.6 22 9s-1.1 2.5-2.5 2.5zm-2.2 2.9c1.3 1.3 2.9 2.8 2.6 4.8-.3 1-1 2-2.3 2.3-.7.1-3.1-.4-5.5-.4h-.2c-2.5 0-4.8.6-5.5.4-1.3-.3-2-1.3-2.3-2.3-.3-2 1.3-3.5 2.6-4.8.9-1 1.6-1.9 2.5-2.9.5-.5 1.1-1.1 1.8-1.3.1 0 .2-.1.3-.1.2-.1.4-.1.7-.1h.8c.1 0 .2.1.3.1.7.2 1.3.8 1.8 1.3.8 1.1 1.6 1.9 2.4 3z"
  }));
};

var SvgPets = styled(BaseComponent)(_templateObject());
SvgPets.isIcon = true;
SvgPets.defaultProps = {
  size: 24,
  tabIndex: -1,
  focusable: false,
  'aria-hidden': true,
  role: 'img'
};
export default SvgPets;