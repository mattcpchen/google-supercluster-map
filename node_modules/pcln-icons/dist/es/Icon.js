function _templateObject() {
  var data = _taggedTemplateLiteral(["\n  outline: none;\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import styled from 'styled-components';
import upperFirst from 'lodash.upperfirst';
import PropTypes from 'prop-types';
import * as icons from './index';

var BaseIcon = function BaseIcon(_ref) {
  var name = _ref.name,
      title = _ref.title,
      desc = _ref.desc,
      titleId = _ref.titleId,
      descId = _ref.descId,
      props = _objectWithoutProperties(_ref, ["name", "title", "desc", "titleId", "descId"]);

  var Component = icons[name] || icons[upperFirst(name)];
  var ariaLabelledBy = titleId ? titleId : '';
  ariaLabelledBy += desc && descId ? " ".concat(descId) : '';
  ariaLabelledBy = ariaLabelledBy ? ariaLabelledBy : undefined;

  if (!Component) {
    if (process.env.NODE_ENV !== 'production') {
      console.trace(name ? "icon ".concat(name, " does not exist") : 'icon is missing name prop');
    }

    return null;
  } else {
    return React.createElement(Component, _extends({
      title: title || name,
      desc: desc,
      titleId: titleId,
      descId: descId,
      "aria-hidden": !ariaLabelledBy,
      "aria-labelledby": ariaLabelledBy,
      tabIndex: -1,
      focusable: false
    }, props));
  }
};

var Icon = styled(BaseIcon)(_templateObject());
Icon.isIcon = true;
Icon.displayName = 'Icon';
Icon.defaultProps = {
  size: 24
};
Icon.propTypes = {
  name: function name(props, key, componentName) {
    var name = props[key];

    if (!icons[name] && !icons[upperFirst(name)]) {
      return new Error("Unknown name prop `".concat(name, "` supplied to `").concat(componentName, "`"));
    }
  },
  title: PropTypes.string,
  titleId: PropTypes.string,
  desc: PropTypes.string,
  descId: PropTypes.string
};
export default Icon;