function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _templateObject2() {
  var data = _taggedTemplateLiteral(["\n      background-color: ", ";\n    "]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n      color: ", ";\n    "]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import styled, { css } from 'styled-components';
import { space, width, themeGet } from 'styled-system';
/**
 * Gets the color of a palette shade, using props.color as
 * the palette color. If palette shade does not exist, falls
 * back to theme.colors
 *
 * @see This function is a copy of the core function located
 * in /core/src/utils.js in order to avoid circular issues
 *
 * @example getPaletteColor('dark')(props) => will return the dark
 * shade of theme.palette[props.color].dark
 * @example getPaletteColor('primary.base')(props) => theme.palette.primary.base
 * @example getPaletteColor('primary', 'base')(props) => theme.palette.primary.base
 */

var getPaletteColor = function getPaletteColor() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return function (props) {
    var color = args.length === 2 ? args[0] : props.color;
    var shade = args.length === 2 ? args[1] : args[0];
    var colorShade = shade.match(/^([a-z]+)\.([a-z]+)$/);

    if (colorShade) {
      color = colorShade[0];
      shade = colorShade[1];
    }

    return themeGet("palette.".concat(color, ".").concat(shade))(props) || themeGet("palette.".concat(color))(props) || themeGet("colors.".concat(color))(props) || color;
  };
};

var color = function color(props) {
  if (props.color) {
    return css(_templateObject(), getPaletteColor('base')(props));
  }

  return null;
};

var bg = function bg(props) {
  if (props.bg) {
    return css(_templateObject2(), getPaletteColor(props.bg, 'base')(props));
  }

  return null;
};

var Svg = styled('svg')({
  flex: 'none'
}, space, width, color, bg);
Svg.propTypes = _objectSpread({}, space.propTypes, {}, width.propTypes, {}, color.propTypes);
export default Svg;