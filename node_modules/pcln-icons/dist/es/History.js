function _templateObject() {
  var data = _taggedTemplateLiteral(["\n  outline: none;\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import Svg from './Svg';
import styled from 'styled-components';

var BaseComponent = function BaseComponent(_ref) {
  var size = _ref.size,
      title = _ref.title,
      desc = _ref.desc,
      titleId = _ref.titleId,
      descId = _ref.descId,
      props = _objectWithoutProperties(_ref, ["size", "title", "desc", "titleId", "descId"]);

  var ariaLabelledBy = titleId ? titleId : '';
  ariaLabelledBy += desc && descId ? " ".concat(descId) : '';
  ariaLabelledBy = ariaLabelledBy ? ariaLabelledBy : undefined;
  props['aria-labelledby'] = ariaLabelledBy;
  return React.createElement(Svg, _extends({
    viewBox: "0 0 24 24",
    height: size,
    width: size,
    title: title,
    titleId: titleId,
    desc: desc,
    descId: descId,
    "aria-labelledby": ariaLabelledBy,
    "aria-hidden": !ariaLabelledBy,
    fill: "currentcolor"
  }, props), !!title && React.createElement("title", {
    id: titleId
  }, title), !!desc && React.createElement("desc", {
    id: descId
  }, desc), React.createElement("path", {
    d: "M22 12c0 4.7-3.8 8.6-8.6 8.6-2.4 0-4.5-1-6.1-2.5l1.4-1.4c1.2 1.2 2.9 2 4.7 2A6.7 6.7 0 106.7 12h2.9l-3.8 3.8-.1-.1L2 12h2.9c0-4.7 3.8-8.6 8.6-8.6S22 7.3 22 12zm-9.5-3.8V13l4.1 2.4.7-1.2-3.3-2v-4h-1.5z"
  }));
};

var SvgHistory = styled(BaseComponent)(_templateObject());
SvgHistory.isIcon = true;
SvgHistory.defaultProps = {
  size: 24,
  tabIndex: -1,
  focusable: false,
  'aria-hidden': true,
  role: 'img'
};
export default SvgHistory;